#!/bin/bash
#BSUB -n 60
#BSUB -R "span[block=20]"
#BSUB -W 2:00
#BSUB -R "select[model == XeonE5_2660v3]"
#BSUB -R "rusage[mem=3GB]"
#BSUB -J profiling

module purge
module load mpi/3.1.3-gcc-8.2.0

# do a clean build to ensure everything is updated
make clean
make CFLAGS="-O3 -march=native"

# Loop matrix size
for N in 500 1000 3000 6000 10000 30000
do

# Loop px
all_p="1 4 8 16 20 $LSB_DJOB_NUMPROC"
for px in $all_p ; do
for py in $all_p ; do
np=$((px*py))

# skip 1 processor counts
[ $np -eq 1 ] && continue
# skip calculations with more processors than available
[ $np -gt $LSB_DJOB_NUMPROC ] && continue

blocks="8 24 128"
for nx1 in $blocks ; do
for ny1 in $nx1 ; do
#for ny1 in $blocks ; do

for nx2 in $blocks ; do
for ny2 in $nx2 ; do
#for ny2 in $blocks ; do

# Skip copying stuff
[ $nx1 -eq $nx2 -a $ny1 -eq $ny2 ] && continue

# adjust here for the different algorithms
for algo in 1
do
out="Simpledata/${N}_px${px}_py${py}_nx1_${nx1}_ny1_${ny1}_nx2_${nx2}_ny2_${ny2}_${algo}"
[ -e $out ] && continue

# Adjust arguments to your project
echo "mpirun -np $np --map-by dist:span --mca rmaps_dist_device ib0 \
--report-bindings \
./Simple $N $px $py $nx1 $ny1 $px $py $nx2 $ny2 $algo 2>&1 > $out"

mpirun -np $np --map-by dist:span --mca rmaps_dist_device ib0 \
       --report-bindings \
       ./Initial $N $px $py $nx1 $ny1 $px $py $nx2 $ny2 $algo > $out 2>${out}_binding
if [ $? -ne 0 ]; then
    echo "Exitting before done!!!"
    exit 1
fi

done #algo

done #ny2
done #nx2

done #ny1
done #nx1

done #py
done #px

done #N

